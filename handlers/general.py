from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from keyboards import get_inlane_keyboard
from aiogram.utils.markdown import hlink
from database.insert_db import insert_id, insert_fio, insert_phone_number
from database.get_from_db import is_login, count_users, is_ok_fio
from database.delete_from_db import delete_all, delete_fio, delete_phone_number
import re

router = Router()

class Base(StatesGroup):
    start = State()
    help = State()
    kvit = State()
    info = State()
    act = State()
    owner = State()
    stat = State()
    fio = State()
    phone_number = State()

@router.message(CommandStart())
async def welcome(message: Message, state: FSMContext):
    fio = is_ok_fio(message.from_user.id)
    print(fio)
    if fio == True:   
        await state.set_state(Base.start)
        await message.answer(f'–ü—Ä–∏–≤–µ—Ç!üëã\n–Ø —Ç—Ä–µ–Ω–µ—Ä—Å–∫–∏–π –±–æ—Ç –§–µ–¥–µ—Ä–∞—Ü–∏–∏ —Ç—Ö—ç–∫–≤–æ–Ω-–¥–æ –¢–∞–º–±–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?üëá', reply_markup=get_inlane_keyboard('welcome_msg'))
    else:
        delete_all(message.from_user.id)
        insert_id(id=message.from_user.id)
        await state.set_state(Base.fio)
        await message.answer(f'–ü—Ä–∏–≤–µ—Çüëã, –∫–∞–∂–µ—Ç—Å—è –º—ã –µ—â–µ –Ω–µ –∑–Ω–∞–∫–æ–º—ã. –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –º–æ–≥—É—Ç –∏–º–µ—Ç—å –ª–∏—à—å —Ç—Ä–µ–Ω–µ—Ä–∞.\n\n–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å–≤–æ–µ –§–ò–û, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞')



@router.message(F.text and Base.fio)
async def reg_fio(message:Message,state: FSMContext):
    pattern = r'^[–∞-—è–ê-–Ø]+\s[–∞-—è–ê-–Ø]+\s[–∞-—è–ê-–Ø]+$'
    match = re.match(pattern, message.text)
    if match:
        insert_fio(id=message.from_user.id, fio=message.text)
        await message.answer(f'–•–æ—Ä–æ—à–æ, –∑–∞–ø–æ–º–Ω—é –≤–∞—Å –∫–∞–∫ <i>{message.text}</i>')
        await state.set_state(Base.phone_number)
        await message.answer(f'–û—Å—Ç–∞–ª–æ—Å—å —á—É—Ç—å-—á—É—Ç—å...\n–ü–µ—Ä–µ–¥–∞–π—Ç–µ –º–Ω–µ —Ç–µ–ø–µ—Ä—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç –≤ —Ç–≥ –¥–ª—è –µ–≥–æ —Å–º–µ–Ω—ã –ø—Ä–∏–¥–µ—Ç—Å—è –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
    else:
        await message.answer(f'–ö–∞–∂–µ—Ç—Å—è: <i>{message.text}</i>, –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –§–ò–û. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
    

    
@router.message(F.text and Base.phone_number or F.contact and Base.phone_number)
async def reg_phone_number(message:Message,state: FSMContext):
    digits_pattern = r'\d'
    matches = re.findall(digits_pattern, message.text)

    if len(matches) >= 10:
        phone = re.sub(r'\D', '', message.text)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if len(phone) == 10:
            phone = '+7 (' + phone[:3] + ') ' + phone[3:6] + '-' + phone[6:]
        elif len(phone) == 11:
            phone = '+7 (' + phone[1:4] + ') ' + phone[4:7] + '-' + phone[7:]
        elif len(phone) == 12:
            phone = '+' + phone[:1] + ' (' + phone[2:5] + ') ' + phone[5:8] + '-' + phone[8:]
        insert_phone_number(id=message.from_user.id, phone_number= phone)
        await message.answer(f'–ó–∞–ø–∏—Å—ã–≤–∞—é –≤–∞—à –Ω–æ–º–µ—Ä –∫–∞–∫ <u>{phone}</u>')
        await state.set_state(Base.start)
        await message.answer(f'–ü—Ä–∏–≤–µ—Ç!üëã\n–Ø —Ç—Ä–µ–Ω–µ—Ä—Å–∫–∏–π –±–æ—Ç –§–µ–¥–µ—Ä–∞—Ü–∏–∏ —Ç—Ö—ç–∫–≤–æ–Ω-–¥–æ –¢–∞–º–±–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?üëá', reply_markup=get_inlane_keyboard('welcome_msg'))    
    else:
        await message.answer(f'–í–∞—à –≤–≤–æ–¥: <u>{message.text}</u> –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')



@router.message(Command('help'))
async def help(message: Message, state: FSMContext):
    await state.set_state(Base.help)
    await message.answer(f'üÜò –ü–æ–º–æ—â—å!\n\n–ß—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç? <i>–ü–∏—à–∏—Ç–µ @shinyaa17</i>')

@router.message(Command('owner'))
async def help(message: Message, state: FSMContext):
    await state.set_state(Base.owner)
    await message.answer(f'–í—ã –º–æ–∂–µ—Ç–µ —Å–æ –º–Ω–æ–π —Å–≤—è–∑–∞—Ç—å—Å—è <i>–∑–¥–µ—Å—å - @shinyaa17</i>')

@router.message(Command('act'))
async def help(message: Message, state: FSMContext):
    await state.set_state(Base.act)
    await message.answer(f'–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞')

@router.message(Command('check'))
async def help(message: Message, state: FSMContext):
    await state.set_state(Base.check)
    await message.answer(f'–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞')

@router.message(Command('stat'))
async def help(message: Message, state: FSMContext):
    await state.set_state(Base.stat)
    await message.answer(f'–ö–æ–ª-–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count_users()}')

@router.message(Command('info'))
async def info(message: Message, state: FSMContext):
    url = "https://docs.google.com/spreadsheets/d/1Y9reMBF4_aUSrJDeZ4VFnERJ9JkYlGJK/edit?usp=sharing&ouid=105467863721396286205&rtpof=true&sd=true"
    await state.set_state(Base.help)
    await message.answer(f'–ü–æ {hlink("—Å—Å—ã–ª–∫–µ", url)} —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ —Å–≤–µ—Ä–∫–∏.\n\n–í —Å—Ç–æ–ª–±—Ü–µ –ê –º–æ–≥—É—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏—à—å <u>—Ñ–∞–º–∏–ª–∏–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø.</u> '
                         f'–í —Å—Ç–æ–ª–±—Ü–µ –í –º–æ–≥—É—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è <u>—Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π(—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã) –∏ –ª—é–±–æ–µ —Å–ª–æ–≤–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä —Å—É–º–º–∞, –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ, –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã</u>')
    await message.answer('0 –≤ —Å—É–º–º–∞—Ö –Ω–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è, –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –Ω–∞ –Ω–∏—Ö –Ω–µ —Å–æ–∑–¥–∞—é—Ç—Å—è, –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –±–æ–ª—å—à–µ 1')

@router.callback_query(F.data == 'button_0')
async def main_menu(call: CallbackQuery, state: FSMContext):
    await state.set_state(Base.start)
    await call.message.answer(f'–ü—Ä–∏–≤–µ—Ç!üëã\n–Ø —Ç—Ä–µ–Ω–µ—Ä—Å–∫–∏–π –±–æ—Ç –§–µ–¥–µ—Ä–∞—Ü–∏–∏ —Ç—Ö—ç–∫–≤–æ–Ω-–¥–æ –¢–∞–º–±–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?üëá', reply_markup=get_inlane_keyboard('welcome_msg'))
    await call.answer()

